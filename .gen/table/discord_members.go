//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var DiscordMembers = newDiscordMembersTable("", "discord_members", "")

type discordMembersTable struct {
	sqlite.Table

	// Columns
	Created   sqlite.ColumnString
	ID        sqlite.ColumnString
	Nicknames sqlite.ColumnString
	Updated   sqlite.ColumnString
	Username  sqlite.ColumnString
	DiscordID sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type DiscordMembersTable struct {
	discordMembersTable

	EXCLUDED discordMembersTable
}

// AS creates new DiscordMembersTable with assigned alias
func (a DiscordMembersTable) AS(alias string) *DiscordMembersTable {
	return newDiscordMembersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DiscordMembersTable with assigned schema name
func (a DiscordMembersTable) FromSchema(schemaName string) *DiscordMembersTable {
	return newDiscordMembersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DiscordMembersTable with assigned table prefix
func (a DiscordMembersTable) WithPrefix(prefix string) *DiscordMembersTable {
	return newDiscordMembersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DiscordMembersTable with assigned table suffix
func (a DiscordMembersTable) WithSuffix(suffix string) *DiscordMembersTable {
	return newDiscordMembersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDiscordMembersTable(schemaName, tableName, alias string) *DiscordMembersTable {
	return &DiscordMembersTable{
		discordMembersTable: newDiscordMembersTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newDiscordMembersTableImpl("", "excluded", ""),
	}
}

func newDiscordMembersTableImpl(schemaName, tableName, alias string) discordMembersTable {
	var (
		CreatedColumn   = sqlite.StringColumn("created")
		IDColumn        = sqlite.StringColumn("id")
		NicknamesColumn = sqlite.StringColumn("nicknames")
		UpdatedColumn   = sqlite.StringColumn("updated")
		UsernameColumn  = sqlite.StringColumn("username")
		DiscordIDColumn = sqlite.StringColumn("discord_id")
		allColumns      = sqlite.ColumnList{CreatedColumn, IDColumn, NicknamesColumn, UpdatedColumn, UsernameColumn, DiscordIDColumn}
		mutableColumns  = sqlite.ColumnList{CreatedColumn, NicknamesColumn, UpdatedColumn, UsernameColumn, DiscordIDColumn}
	)

	return discordMembersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Created:   CreatedColumn,
		ID:        IDColumn,
		Nicknames: NicknamesColumn,
		Updated:   UpdatedColumn,
		Username:  UsernameColumn,
		DiscordID: DiscordIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
