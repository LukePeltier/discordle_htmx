//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Messages = newMessagesTable("", "messages", "")

type messagesTable struct {
	sqlite.Table

	// Columns
	Created       sqlite.ColumnString
	DateSent      sqlite.ColumnString
	DiscordMember sqlite.ColumnString
	ID            sqlite.ColumnString
	MessageURL    sqlite.ColumnString
	Text          sqlite.ColumnString
	Updated       sqlite.ColumnString
	DiscordID     sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MessagesTable struct {
	messagesTable

	EXCLUDED messagesTable
}

// AS creates new MessagesTable with assigned alias
func (a MessagesTable) AS(alias string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MessagesTable with assigned schema name
func (a MessagesTable) FromSchema(schemaName string) *MessagesTable {
	return newMessagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MessagesTable with assigned table prefix
func (a MessagesTable) WithPrefix(prefix string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MessagesTable with assigned table suffix
func (a MessagesTable) WithSuffix(suffix string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMessagesTable(schemaName, tableName, alias string) *MessagesTable {
	return &MessagesTable{
		messagesTable: newMessagesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newMessagesTableImpl("", "excluded", ""),
	}
}

func newMessagesTableImpl(schemaName, tableName, alias string) messagesTable {
	var (
		CreatedColumn       = sqlite.StringColumn("created")
		DateSentColumn      = sqlite.StringColumn("date_sent")
		DiscordMemberColumn = sqlite.StringColumn("discord_member")
		IDColumn            = sqlite.StringColumn("id")
		MessageURLColumn    = sqlite.StringColumn("message_url")
		TextColumn          = sqlite.StringColumn("text")
		UpdatedColumn       = sqlite.StringColumn("updated")
		DiscordIDColumn     = sqlite.StringColumn("discord_id")
		allColumns          = sqlite.ColumnList{CreatedColumn, DateSentColumn, DiscordMemberColumn, IDColumn, MessageURLColumn, TextColumn, UpdatedColumn, DiscordIDColumn}
		mutableColumns      = sqlite.ColumnList{CreatedColumn, DateSentColumn, DiscordMemberColumn, MessageURLColumn, TextColumn, UpdatedColumn, DiscordIDColumn}
	)

	return messagesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Created:       CreatedColumn,
		DateSent:      DateSentColumn,
		DiscordMember: DiscordMemberColumn,
		ID:            IDColumn,
		MessageURL:    MessageURLColumn,
		Text:          TextColumn,
		Updated:       UpdatedColumn,
		DiscordID:     DiscordIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
