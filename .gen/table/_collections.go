//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Collections = newCollectionsTable("", "_collections", "")

type collectionsTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnString
	System     sqlite.ColumnBool
	Type       sqlite.ColumnString
	Name       sqlite.ColumnString
	Schema     sqlite.ColumnString
	Indexes    sqlite.ColumnString
	ListRule   sqlite.ColumnString
	ViewRule   sqlite.ColumnString
	CreateRule sqlite.ColumnString
	UpdateRule sqlite.ColumnString
	DeleteRule sqlite.ColumnString
	Options    sqlite.ColumnString
	Created    sqlite.ColumnString
	Updated    sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CollectionsTable struct {
	collectionsTable

	EXCLUDED collectionsTable
}

// AS creates new CollectionsTable with assigned alias
func (a CollectionsTable) AS(alias string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionsTable with assigned schema name
func (a CollectionsTable) FromSchema(schemaName string) *CollectionsTable {
	return newCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionsTable with assigned table prefix
func (a CollectionsTable) WithPrefix(prefix string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionsTable with assigned table suffix
func (a CollectionsTable) WithSuffix(suffix string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionsTable(schemaName, tableName, alias string) *CollectionsTable {
	return &CollectionsTable{
		collectionsTable: newCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newCollectionsTableImpl("", "excluded", ""),
	}
}

func newCollectionsTableImpl(schemaName, tableName, alias string) collectionsTable {
	var (
		IDColumn         = sqlite.StringColumn("id")
		SystemColumn     = sqlite.BoolColumn("system")
		TypeColumn       = sqlite.StringColumn("type")
		NameColumn       = sqlite.StringColumn("name")
		SchemaColumn     = sqlite.StringColumn("schema")
		IndexesColumn    = sqlite.StringColumn("indexes")
		ListRuleColumn   = sqlite.StringColumn("listRule")
		ViewRuleColumn   = sqlite.StringColumn("viewRule")
		CreateRuleColumn = sqlite.StringColumn("createRule")
		UpdateRuleColumn = sqlite.StringColumn("updateRule")
		DeleteRuleColumn = sqlite.StringColumn("deleteRule")
		OptionsColumn    = sqlite.StringColumn("options")
		CreatedColumn    = sqlite.StringColumn("created")
		UpdatedColumn    = sqlite.StringColumn("updated")
		allColumns       = sqlite.ColumnList{IDColumn, SystemColumn, TypeColumn, NameColumn, SchemaColumn, IndexesColumn, ListRuleColumn, ViewRuleColumn, CreateRuleColumn, UpdateRuleColumn, DeleteRuleColumn, OptionsColumn, CreatedColumn, UpdatedColumn}
		mutableColumns   = sqlite.ColumnList{SystemColumn, TypeColumn, NameColumn, SchemaColumn, IndexesColumn, ListRuleColumn, ViewRuleColumn, CreateRuleColumn, UpdateRuleColumn, DeleteRuleColumn, OptionsColumn, CreatedColumn, UpdatedColumn}
	)

	return collectionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		System:     SystemColumn,
		Type:       TypeColumn,
		Name:       NameColumn,
		Schema:     SchemaColumn,
		Indexes:    IndexesColumn,
		ListRule:   ListRuleColumn,
		ViewRule:   ViewRuleColumn,
		CreateRule: CreateRuleColumn,
		UpdateRule: UpdateRuleColumn,
		DeleteRule: DeleteRuleColumn,
		Options:    OptionsColumn,
		Created:    CreatedColumn,
		Updated:    UpdatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
