//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Users = newUsersTable("", "users", "")

type usersTable struct {
	sqlite.Table

	// Columns
	Avatar                 sqlite.ColumnString
	Created                sqlite.ColumnString
	Email                  sqlite.ColumnString
	EmailVisibility        sqlite.ColumnBool
	ID                     sqlite.ColumnString
	LastLoginAlertSentAt   sqlite.ColumnString
	LastResetSentAt        sqlite.ColumnString
	LastVerificationSentAt sqlite.ColumnString
	Name                   sqlite.ColumnString
	PasswordHash           sqlite.ColumnString
	TokenKey               sqlite.ColumnString
	Updated                sqlite.ColumnString
	Username               sqlite.ColumnString
	Verified               sqlite.ColumnBool

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		AvatarColumn                 = sqlite.StringColumn("avatar")
		CreatedColumn                = sqlite.StringColumn("created")
		EmailColumn                  = sqlite.StringColumn("email")
		EmailVisibilityColumn        = sqlite.BoolColumn("emailVisibility")
		IDColumn                     = sqlite.StringColumn("id")
		LastLoginAlertSentAtColumn   = sqlite.StringColumn("lastLoginAlertSentAt")
		LastResetSentAtColumn        = sqlite.StringColumn("lastResetSentAt")
		LastVerificationSentAtColumn = sqlite.StringColumn("lastVerificationSentAt")
		NameColumn                   = sqlite.StringColumn("name")
		PasswordHashColumn           = sqlite.StringColumn("passwordHash")
		TokenKeyColumn               = sqlite.StringColumn("tokenKey")
		UpdatedColumn                = sqlite.StringColumn("updated")
		UsernameColumn               = sqlite.StringColumn("username")
		VerifiedColumn               = sqlite.BoolColumn("verified")
		allColumns                   = sqlite.ColumnList{AvatarColumn, CreatedColumn, EmailColumn, EmailVisibilityColumn, IDColumn, LastLoginAlertSentAtColumn, LastResetSentAtColumn, LastVerificationSentAtColumn, NameColumn, PasswordHashColumn, TokenKeyColumn, UpdatedColumn, UsernameColumn, VerifiedColumn}
		mutableColumns               = sqlite.ColumnList{AvatarColumn, CreatedColumn, EmailColumn, EmailVisibilityColumn, LastLoginAlertSentAtColumn, LastResetSentAtColumn, LastVerificationSentAtColumn, NameColumn, PasswordHashColumn, TokenKeyColumn, UpdatedColumn, UsernameColumn, VerifiedColumn}
	)

	return usersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Avatar:                 AvatarColumn,
		Created:                CreatedColumn,
		Email:                  EmailColumn,
		EmailVisibility:        EmailVisibilityColumn,
		ID:                     IDColumn,
		LastLoginAlertSentAt:   LastLoginAlertSentAtColumn,
		LastResetSentAt:        LastResetSentAtColumn,
		LastVerificationSentAt: LastVerificationSentAtColumn,
		Name:                   NameColumn,
		PasswordHash:           PasswordHashColumn,
		TokenKey:               TokenKeyColumn,
		Updated:                UpdatedColumn,
		Username:               UsernameColumn,
		Verified:               VerifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
