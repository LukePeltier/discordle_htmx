//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Params = newParamsTable("", "_params", "")

type paramsTable struct {
	sqlite.Table

	// Columns
	ID      sqlite.ColumnString
	Key     sqlite.ColumnString
	Value   sqlite.ColumnString
	Created sqlite.ColumnString
	Updated sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ParamsTable struct {
	paramsTable

	EXCLUDED paramsTable
}

// AS creates new ParamsTable with assigned alias
func (a ParamsTable) AS(alias string) *ParamsTable {
	return newParamsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ParamsTable with assigned schema name
func (a ParamsTable) FromSchema(schemaName string) *ParamsTable {
	return newParamsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ParamsTable with assigned table prefix
func (a ParamsTable) WithPrefix(prefix string) *ParamsTable {
	return newParamsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ParamsTable with assigned table suffix
func (a ParamsTable) WithSuffix(suffix string) *ParamsTable {
	return newParamsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newParamsTable(schemaName, tableName, alias string) *ParamsTable {
	return &ParamsTable{
		paramsTable: newParamsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newParamsTableImpl("", "excluded", ""),
	}
}

func newParamsTableImpl(schemaName, tableName, alias string) paramsTable {
	var (
		IDColumn       = sqlite.StringColumn("id")
		KeyColumn      = sqlite.StringColumn("key")
		ValueColumn    = sqlite.StringColumn("value")
		CreatedColumn  = sqlite.StringColumn("created")
		UpdatedColumn  = sqlite.StringColumn("updated")
		allColumns     = sqlite.ColumnList{IDColumn, KeyColumn, ValueColumn, CreatedColumn, UpdatedColumn}
		mutableColumns = sqlite.ColumnList{KeyColumn, ValueColumn, CreatedColumn, UpdatedColumn}
	)

	return paramsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Key:     KeyColumn,
		Value:   ValueColumn,
		Created: CreatedColumn,
		Updated: UpdatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
