// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lukepeltier/discordle/ent/message"
	"github.com/lukepeltier/discordle/ent/messagescore"
	"github.com/lukepeltier/discordle/ent/predicate"
)

// MessageScoreUpdate is the builder for updating MessageScore entities.
type MessageScoreUpdate struct {
	config
	hooks    []Hook
	mutation *MessageScoreMutation
}

// Where appends a list predicates to the MessageScoreUpdate builder.
func (msu *MessageScoreUpdate) Where(ps ...predicate.MessageScore) *MessageScoreUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetScore sets the "score" field.
func (msu *MessageScoreUpdate) SetScore(u uint16) *MessageScoreUpdate {
	msu.mutation.ResetScore()
	msu.mutation.SetScore(u)
	return msu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (msu *MessageScoreUpdate) SetNillableScore(u *uint16) *MessageScoreUpdate {
	if u != nil {
		msu.SetScore(*u)
	}
	return msu
}

// AddScore adds u to the "score" field.
func (msu *MessageScoreUpdate) AddScore(u int16) *MessageScoreUpdate {
	msu.mutation.AddScore(u)
	return msu
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (msu *MessageScoreUpdate) SetMessageID(id int) *MessageScoreUpdate {
	msu.mutation.SetMessageID(id)
	return msu
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (msu *MessageScoreUpdate) SetNillableMessageID(id *int) *MessageScoreUpdate {
	if id != nil {
		msu = msu.SetMessageID(*id)
	}
	return msu
}

// SetMessage sets the "message" edge to the Message entity.
func (msu *MessageScoreUpdate) SetMessage(m *Message) *MessageScoreUpdate {
	return msu.SetMessageID(m.ID)
}

// Mutation returns the MessageScoreMutation object of the builder.
func (msu *MessageScoreUpdate) Mutation() *MessageScoreMutation {
	return msu.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (msu *MessageScoreUpdate) ClearMessage() *MessageScoreUpdate {
	msu.mutation.ClearMessage()
	return msu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MessageScoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MessageScoreUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MessageScoreUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MessageScoreUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msu *MessageScoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(messagescore.Table, messagescore.Columns, sqlgraph.NewFieldSpec(messagescore.FieldID, field.TypeInt))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.Score(); ok {
		_spec.SetField(messagescore.FieldScore, field.TypeUint16, value)
	}
	if value, ok := msu.mutation.AddedScore(); ok {
		_spec.AddField(messagescore.FieldScore, field.TypeUint16, value)
	}
	if msu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   messagescore.MessageTable,
			Columns: []string{messagescore.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   messagescore.MessageTable,
			Columns: []string{messagescore.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagescore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MessageScoreUpdateOne is the builder for updating a single MessageScore entity.
type MessageScoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageScoreMutation
}

// SetScore sets the "score" field.
func (msuo *MessageScoreUpdateOne) SetScore(u uint16) *MessageScoreUpdateOne {
	msuo.mutation.ResetScore()
	msuo.mutation.SetScore(u)
	return msuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (msuo *MessageScoreUpdateOne) SetNillableScore(u *uint16) *MessageScoreUpdateOne {
	if u != nil {
		msuo.SetScore(*u)
	}
	return msuo
}

// AddScore adds u to the "score" field.
func (msuo *MessageScoreUpdateOne) AddScore(u int16) *MessageScoreUpdateOne {
	msuo.mutation.AddScore(u)
	return msuo
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (msuo *MessageScoreUpdateOne) SetMessageID(id int) *MessageScoreUpdateOne {
	msuo.mutation.SetMessageID(id)
	return msuo
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (msuo *MessageScoreUpdateOne) SetNillableMessageID(id *int) *MessageScoreUpdateOne {
	if id != nil {
		msuo = msuo.SetMessageID(*id)
	}
	return msuo
}

// SetMessage sets the "message" edge to the Message entity.
func (msuo *MessageScoreUpdateOne) SetMessage(m *Message) *MessageScoreUpdateOne {
	return msuo.SetMessageID(m.ID)
}

// Mutation returns the MessageScoreMutation object of the builder.
func (msuo *MessageScoreUpdateOne) Mutation() *MessageScoreMutation {
	return msuo.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (msuo *MessageScoreUpdateOne) ClearMessage() *MessageScoreUpdateOne {
	msuo.mutation.ClearMessage()
	return msuo
}

// Where appends a list predicates to the MessageScoreUpdate builder.
func (msuo *MessageScoreUpdateOne) Where(ps ...predicate.MessageScore) *MessageScoreUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MessageScoreUpdateOne) Select(field string, fields ...string) *MessageScoreUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MessageScore entity.
func (msuo *MessageScoreUpdateOne) Save(ctx context.Context) (*MessageScore, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MessageScoreUpdateOne) SaveX(ctx context.Context) *MessageScore {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MessageScoreUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MessageScoreUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msuo *MessageScoreUpdateOne) sqlSave(ctx context.Context) (_node *MessageScore, err error) {
	_spec := sqlgraph.NewUpdateSpec(messagescore.Table, messagescore.Columns, sqlgraph.NewFieldSpec(messagescore.FieldID, field.TypeInt))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageScore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagescore.FieldID)
		for _, f := range fields {
			if !messagescore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagescore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.Score(); ok {
		_spec.SetField(messagescore.FieldScore, field.TypeUint16, value)
	}
	if value, ok := msuo.mutation.AddedScore(); ok {
		_spec.AddField(messagescore.FieldScore, field.TypeUint16, value)
	}
	if msuo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   messagescore.MessageTable,
			Columns: []string{messagescore.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   messagescore.MessageTable,
			Columns: []string{messagescore.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MessageScore{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagescore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
