// Code generated by ent, DO NOT EDIT.

package discordmember

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lukepeltier/discordle/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEQ(FieldUsername, v))
}

// DiscordID applies equality check predicate on the "discord_id" field. It's identical to DiscordIDEQ.
func DiscordID(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEQ(FieldDiscordID, v))
}

// Blacklisted applies equality check predicate on the "blacklisted" field. It's identical to BlacklistedEQ.
func Blacklisted(v bool) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEQ(FieldBlacklisted, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldContainsFold(FieldUsername, v))
}

// DiscordIDEQ applies the EQ predicate on the "discord_id" field.
func DiscordIDEQ(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEQ(FieldDiscordID, v))
}

// DiscordIDNEQ applies the NEQ predicate on the "discord_id" field.
func DiscordIDNEQ(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldNEQ(FieldDiscordID, v))
}

// DiscordIDIn applies the In predicate on the "discord_id" field.
func DiscordIDIn(vs ...string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldIn(FieldDiscordID, vs...))
}

// DiscordIDNotIn applies the NotIn predicate on the "discord_id" field.
func DiscordIDNotIn(vs ...string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldNotIn(FieldDiscordID, vs...))
}

// DiscordIDGT applies the GT predicate on the "discord_id" field.
func DiscordIDGT(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldGT(FieldDiscordID, v))
}

// DiscordIDGTE applies the GTE predicate on the "discord_id" field.
func DiscordIDGTE(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldGTE(FieldDiscordID, v))
}

// DiscordIDLT applies the LT predicate on the "discord_id" field.
func DiscordIDLT(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldLT(FieldDiscordID, v))
}

// DiscordIDLTE applies the LTE predicate on the "discord_id" field.
func DiscordIDLTE(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldLTE(FieldDiscordID, v))
}

// DiscordIDContains applies the Contains predicate on the "discord_id" field.
func DiscordIDContains(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldContains(FieldDiscordID, v))
}

// DiscordIDHasPrefix applies the HasPrefix predicate on the "discord_id" field.
func DiscordIDHasPrefix(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldHasPrefix(FieldDiscordID, v))
}

// DiscordIDHasSuffix applies the HasSuffix predicate on the "discord_id" field.
func DiscordIDHasSuffix(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldHasSuffix(FieldDiscordID, v))
}

// DiscordIDEqualFold applies the EqualFold predicate on the "discord_id" field.
func DiscordIDEqualFold(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEqualFold(FieldDiscordID, v))
}

// DiscordIDContainsFold applies the ContainsFold predicate on the "discord_id" field.
func DiscordIDContainsFold(v string) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldContainsFold(FieldDiscordID, v))
}

// BlacklistedEQ applies the EQ predicate on the "blacklisted" field.
func BlacklistedEQ(v bool) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldEQ(FieldBlacklisted, v))
}

// BlacklistedNEQ applies the NEQ predicate on the "blacklisted" field.
func BlacklistedNEQ(v bool) predicate.DiscordMember {
	return predicate.DiscordMember(sql.FieldNEQ(FieldBlacklisted, v))
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.DiscordMember {
	return predicate.DiscordMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.Message) predicate.DiscordMember {
	return predicate.DiscordMember(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiscordMember) predicate.DiscordMember {
	return predicate.DiscordMember(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiscordMember) predicate.DiscordMember {
	return predicate.DiscordMember(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiscordMember) predicate.DiscordMember {
	return predicate.DiscordMember(sql.NotPredicates(p))
}
