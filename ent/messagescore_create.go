// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lukepeltier/discordle/ent/message"
	"github.com/lukepeltier/discordle/ent/messagescore"
)

// MessageScoreCreate is the builder for creating a MessageScore entity.
type MessageScoreCreate struct {
	config
	mutation *MessageScoreMutation
	hooks    []Hook
}

// SetScore sets the "score" field.
func (msc *MessageScoreCreate) SetScore(u uint16) *MessageScoreCreate {
	msc.mutation.SetScore(u)
	return msc
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (msc *MessageScoreCreate) SetMessageID(id int) *MessageScoreCreate {
	msc.mutation.SetMessageID(id)
	return msc
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (msc *MessageScoreCreate) SetNillableMessageID(id *int) *MessageScoreCreate {
	if id != nil {
		msc = msc.SetMessageID(*id)
	}
	return msc
}

// SetMessage sets the "message" edge to the Message entity.
func (msc *MessageScoreCreate) SetMessage(m *Message) *MessageScoreCreate {
	return msc.SetMessageID(m.ID)
}

// Mutation returns the MessageScoreMutation object of the builder.
func (msc *MessageScoreCreate) Mutation() *MessageScoreMutation {
	return msc.mutation
}

// Save creates the MessageScore in the database.
func (msc *MessageScoreCreate) Save(ctx context.Context) (*MessageScore, error) {
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MessageScoreCreate) SaveX(ctx context.Context) *MessageScore {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MessageScoreCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MessageScoreCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MessageScoreCreate) check() error {
	if _, ok := msc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "MessageScore.score"`)}
	}
	return nil
}

func (msc *MessageScoreCreate) sqlSave(ctx context.Context) (*MessageScore, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MessageScoreCreate) createSpec() (*MessageScore, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageScore{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(messagescore.Table, sqlgraph.NewFieldSpec(messagescore.FieldID, field.TypeInt))
	)
	if value, ok := msc.mutation.Score(); ok {
		_spec.SetField(messagescore.FieldScore, field.TypeUint16, value)
		_node.Score = value
	}
	if nodes := msc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   messagescore.MessageTable,
			Columns: []string{messagescore.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.message_score_message = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MessageScoreCreateBulk is the builder for creating many MessageScore entities in bulk.
type MessageScoreCreateBulk struct {
	config
	err      error
	builders []*MessageScoreCreate
}

// Save creates the MessageScore entities in the database.
func (mscb *MessageScoreCreateBulk) Save(ctx context.Context) ([]*MessageScore, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MessageScore, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageScoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MessageScoreCreateBulk) SaveX(ctx context.Context) []*MessageScore {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MessageScoreCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MessageScoreCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}
