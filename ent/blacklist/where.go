// Code generated by ent, DO NOT EDIT.

package blacklist

import (
	"entgo.io/ent/dialect/sql"
	"github.com/lukepeltier/discordle/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldLTE(FieldID, id))
}

// Bad applies equality check predicate on the "bad" field. It's identical to BadEQ.
func Bad(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldEQ(FieldBad, v))
}

// BadEQ applies the EQ predicate on the "bad" field.
func BadEQ(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldEQ(FieldBad, v))
}

// BadNEQ applies the NEQ predicate on the "bad" field.
func BadNEQ(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldNEQ(FieldBad, v))
}

// BadIn applies the In predicate on the "bad" field.
func BadIn(vs ...string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldIn(FieldBad, vs...))
}

// BadNotIn applies the NotIn predicate on the "bad" field.
func BadNotIn(vs ...string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldNotIn(FieldBad, vs...))
}

// BadGT applies the GT predicate on the "bad" field.
func BadGT(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldGT(FieldBad, v))
}

// BadGTE applies the GTE predicate on the "bad" field.
func BadGTE(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldGTE(FieldBad, v))
}

// BadLT applies the LT predicate on the "bad" field.
func BadLT(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldLT(FieldBad, v))
}

// BadLTE applies the LTE predicate on the "bad" field.
func BadLTE(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldLTE(FieldBad, v))
}

// BadContains applies the Contains predicate on the "bad" field.
func BadContains(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldContains(FieldBad, v))
}

// BadHasPrefix applies the HasPrefix predicate on the "bad" field.
func BadHasPrefix(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldHasPrefix(FieldBad, v))
}

// BadHasSuffix applies the HasSuffix predicate on the "bad" field.
func BadHasSuffix(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldHasSuffix(FieldBad, v))
}

// BadEqualFold applies the EqualFold predicate on the "bad" field.
func BadEqualFold(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldEqualFold(FieldBad, v))
}

// BadContainsFold applies the ContainsFold predicate on the "bad" field.
func BadContainsFold(v string) predicate.Blacklist {
	return predicate.Blacklist(sql.FieldContainsFold(FieldBad, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Blacklist) predicate.Blacklist {
	return predicate.Blacklist(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Blacklist) predicate.Blacklist {
	return predicate.Blacklist(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Blacklist) predicate.Blacklist {
	return predicate.Blacklist(sql.NotPredicates(p))
}
