// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/lukepeltier/discordle/ent/discordmember"
	"github.com/lukepeltier/discordle/ent/message"
	"github.com/lukepeltier/discordle/ent/predicate"
)

// DiscordMemberUpdate is the builder for updating DiscordMember entities.
type DiscordMemberUpdate struct {
	config
	hooks    []Hook
	mutation *DiscordMemberMutation
}

// Where appends a list predicates to the DiscordMemberUpdate builder.
func (dmu *DiscordMemberUpdate) Where(ps ...predicate.DiscordMember) *DiscordMemberUpdate {
	dmu.mutation.Where(ps...)
	return dmu
}

// SetUsername sets the "username" field.
func (dmu *DiscordMemberUpdate) SetUsername(s string) *DiscordMemberUpdate {
	dmu.mutation.SetUsername(s)
	return dmu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (dmu *DiscordMemberUpdate) SetNillableUsername(s *string) *DiscordMemberUpdate {
	if s != nil {
		dmu.SetUsername(*s)
	}
	return dmu
}

// SetNicknames sets the "nicknames" field.
func (dmu *DiscordMemberUpdate) SetNicknames(s []string) *DiscordMemberUpdate {
	dmu.mutation.SetNicknames(s)
	return dmu
}

// AppendNicknames appends s to the "nicknames" field.
func (dmu *DiscordMemberUpdate) AppendNicknames(s []string) *DiscordMemberUpdate {
	dmu.mutation.AppendNicknames(s)
	return dmu
}

// SetDiscordID sets the "discord_id" field.
func (dmu *DiscordMemberUpdate) SetDiscordID(s string) *DiscordMemberUpdate {
	dmu.mutation.SetDiscordID(s)
	return dmu
}

// SetNillableDiscordID sets the "discord_id" field if the given value is not nil.
func (dmu *DiscordMemberUpdate) SetNillableDiscordID(s *string) *DiscordMemberUpdate {
	if s != nil {
		dmu.SetDiscordID(*s)
	}
	return dmu
}

// SetBlacklisted sets the "blacklisted" field.
func (dmu *DiscordMemberUpdate) SetBlacklisted(b bool) *DiscordMemberUpdate {
	dmu.mutation.SetBlacklisted(b)
	return dmu
}

// SetNillableBlacklisted sets the "blacklisted" field if the given value is not nil.
func (dmu *DiscordMemberUpdate) SetNillableBlacklisted(b *bool) *DiscordMemberUpdate {
	if b != nil {
		dmu.SetBlacklisted(*b)
	}
	return dmu
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (dmu *DiscordMemberUpdate) AddMessageIDs(ids ...int) *DiscordMemberUpdate {
	dmu.mutation.AddMessageIDs(ids...)
	return dmu
}

// AddMessages adds the "messages" edges to the Message entity.
func (dmu *DiscordMemberUpdate) AddMessages(m ...*Message) *DiscordMemberUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmu.AddMessageIDs(ids...)
}

// Mutation returns the DiscordMemberMutation object of the builder.
func (dmu *DiscordMemberUpdate) Mutation() *DiscordMemberMutation {
	return dmu.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (dmu *DiscordMemberUpdate) ClearMessages() *DiscordMemberUpdate {
	dmu.mutation.ClearMessages()
	return dmu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (dmu *DiscordMemberUpdate) RemoveMessageIDs(ids ...int) *DiscordMemberUpdate {
	dmu.mutation.RemoveMessageIDs(ids...)
	return dmu
}

// RemoveMessages removes "messages" edges to Message entities.
func (dmu *DiscordMemberUpdate) RemoveMessages(m ...*Message) *DiscordMemberUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmu *DiscordMemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dmu.sqlSave, dmu.mutation, dmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DiscordMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DiscordMemberUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DiscordMemberUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmu *DiscordMemberUpdate) check() error {
	if v, ok := dmu.mutation.Username(); ok {
		if err := discordmember.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "DiscordMember.username": %w`, err)}
		}
	}
	return nil
}

func (dmu *DiscordMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(discordmember.Table, discordmember.Columns, sqlgraph.NewFieldSpec(discordmember.FieldID, field.TypeInt))
	if ps := dmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.Username(); ok {
		_spec.SetField(discordmember.FieldUsername, field.TypeString, value)
	}
	if value, ok := dmu.mutation.Nicknames(); ok {
		_spec.SetField(discordmember.FieldNicknames, field.TypeJSON, value)
	}
	if value, ok := dmu.mutation.AppendedNicknames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, discordmember.FieldNicknames, value)
		})
	}
	if value, ok := dmu.mutation.DiscordID(); ok {
		_spec.SetField(discordmember.FieldDiscordID, field.TypeString, value)
	}
	if value, ok := dmu.mutation.Blacklisted(); ok {
		_spec.SetField(discordmember.FieldBlacklisted, field.TypeBool, value)
	}
	if dmu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordmember.MessagesTable,
			Columns: []string{discordmember.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !dmu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordmember.MessagesTable,
			Columns: []string{discordmember.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordmember.MessagesTable,
			Columns: []string{discordmember.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dmu.mutation.done = true
	return n, nil
}

// DiscordMemberUpdateOne is the builder for updating a single DiscordMember entity.
type DiscordMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscordMemberMutation
}

// SetUsername sets the "username" field.
func (dmuo *DiscordMemberUpdateOne) SetUsername(s string) *DiscordMemberUpdateOne {
	dmuo.mutation.SetUsername(s)
	return dmuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (dmuo *DiscordMemberUpdateOne) SetNillableUsername(s *string) *DiscordMemberUpdateOne {
	if s != nil {
		dmuo.SetUsername(*s)
	}
	return dmuo
}

// SetNicknames sets the "nicknames" field.
func (dmuo *DiscordMemberUpdateOne) SetNicknames(s []string) *DiscordMemberUpdateOne {
	dmuo.mutation.SetNicknames(s)
	return dmuo
}

// AppendNicknames appends s to the "nicknames" field.
func (dmuo *DiscordMemberUpdateOne) AppendNicknames(s []string) *DiscordMemberUpdateOne {
	dmuo.mutation.AppendNicknames(s)
	return dmuo
}

// SetDiscordID sets the "discord_id" field.
func (dmuo *DiscordMemberUpdateOne) SetDiscordID(s string) *DiscordMemberUpdateOne {
	dmuo.mutation.SetDiscordID(s)
	return dmuo
}

// SetNillableDiscordID sets the "discord_id" field if the given value is not nil.
func (dmuo *DiscordMemberUpdateOne) SetNillableDiscordID(s *string) *DiscordMemberUpdateOne {
	if s != nil {
		dmuo.SetDiscordID(*s)
	}
	return dmuo
}

// SetBlacklisted sets the "blacklisted" field.
func (dmuo *DiscordMemberUpdateOne) SetBlacklisted(b bool) *DiscordMemberUpdateOne {
	dmuo.mutation.SetBlacklisted(b)
	return dmuo
}

// SetNillableBlacklisted sets the "blacklisted" field if the given value is not nil.
func (dmuo *DiscordMemberUpdateOne) SetNillableBlacklisted(b *bool) *DiscordMemberUpdateOne {
	if b != nil {
		dmuo.SetBlacklisted(*b)
	}
	return dmuo
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (dmuo *DiscordMemberUpdateOne) AddMessageIDs(ids ...int) *DiscordMemberUpdateOne {
	dmuo.mutation.AddMessageIDs(ids...)
	return dmuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (dmuo *DiscordMemberUpdateOne) AddMessages(m ...*Message) *DiscordMemberUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmuo.AddMessageIDs(ids...)
}

// Mutation returns the DiscordMemberMutation object of the builder.
func (dmuo *DiscordMemberUpdateOne) Mutation() *DiscordMemberMutation {
	return dmuo.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (dmuo *DiscordMemberUpdateOne) ClearMessages() *DiscordMemberUpdateOne {
	dmuo.mutation.ClearMessages()
	return dmuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (dmuo *DiscordMemberUpdateOne) RemoveMessageIDs(ids ...int) *DiscordMemberUpdateOne {
	dmuo.mutation.RemoveMessageIDs(ids...)
	return dmuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (dmuo *DiscordMemberUpdateOne) RemoveMessages(m ...*Message) *DiscordMemberUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dmuo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the DiscordMemberUpdate builder.
func (dmuo *DiscordMemberUpdateOne) Where(ps ...predicate.DiscordMember) *DiscordMemberUpdateOne {
	dmuo.mutation.Where(ps...)
	return dmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmuo *DiscordMemberUpdateOne) Select(field string, fields ...string) *DiscordMemberUpdateOne {
	dmuo.fields = append([]string{field}, fields...)
	return dmuo
}

// Save executes the query and returns the updated DiscordMember entity.
func (dmuo *DiscordMemberUpdateOne) Save(ctx context.Context) (*DiscordMember, error) {
	return withHooks(ctx, dmuo.sqlSave, dmuo.mutation, dmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DiscordMemberUpdateOne) SaveX(ctx context.Context) *DiscordMember {
	node, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmuo *DiscordMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DiscordMemberUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmuo *DiscordMemberUpdateOne) check() error {
	if v, ok := dmuo.mutation.Username(); ok {
		if err := discordmember.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "DiscordMember.username": %w`, err)}
		}
	}
	return nil
}

func (dmuo *DiscordMemberUpdateOne) sqlSave(ctx context.Context) (_node *DiscordMember, err error) {
	if err := dmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(discordmember.Table, discordmember.Columns, sqlgraph.NewFieldSpec(discordmember.FieldID, field.TypeInt))
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscordMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordmember.FieldID)
		for _, f := range fields {
			if !discordmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discordmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmuo.mutation.Username(); ok {
		_spec.SetField(discordmember.FieldUsername, field.TypeString, value)
	}
	if value, ok := dmuo.mutation.Nicknames(); ok {
		_spec.SetField(discordmember.FieldNicknames, field.TypeJSON, value)
	}
	if value, ok := dmuo.mutation.AppendedNicknames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, discordmember.FieldNicknames, value)
		})
	}
	if value, ok := dmuo.mutation.DiscordID(); ok {
		_spec.SetField(discordmember.FieldDiscordID, field.TypeString, value)
	}
	if value, ok := dmuo.mutation.Blacklisted(); ok {
		_spec.SetField(discordmember.FieldBlacklisted, field.TypeBool, value)
	}
	if dmuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordmember.MessagesTable,
			Columns: []string{discordmember.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !dmuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordmember.MessagesTable,
			Columns: []string{discordmember.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordmember.MessagesTable,
			Columns: []string{discordmember.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscordMember{config: dmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dmuo.mutation.done = true
	return _node, nil
}
