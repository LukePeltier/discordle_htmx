// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lukepeltier/discordle/ent/message"
	"github.com/lukepeltier/discordle/ent/messagescore"
)

// MessageScore is the model entity for the MessageScore schema.
type MessageScore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Score holds the value of the "score" field.
	Score uint16 `json:"score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageScoreQuery when eager-loading is set.
	Edges                 MessageScoreEdges `json:"edges"`
	message_score_message *int
	selectValues          sql.SelectValues
}

// MessageScoreEdges holds the relations/edges for other nodes in the graph.
type MessageScoreEdges struct {
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageScoreEdges) MessageOrErr() (*Message, error) {
	if e.Message != nil {
		return e.Message, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageScore) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case messagescore.FieldID, messagescore.FieldScore:
			values[i] = new(sql.NullInt64)
		case messagescore.ForeignKeys[0]: // message_score_message
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageScore fields.
func (ms *MessageScore) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messagescore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case messagescore.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				ms.Score = uint16(value.Int64)
			}
		case messagescore.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field message_score_message", value)
			} else if value.Valid {
				ms.message_score_message = new(int)
				*ms.message_score_message = int(value.Int64)
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MessageScore.
// This includes values selected through modifiers, order, etc.
func (ms *MessageScore) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// QueryMessage queries the "message" edge of the MessageScore entity.
func (ms *MessageScore) QueryMessage() *MessageQuery {
	return NewMessageScoreClient(ms.config).QueryMessage(ms)
}

// Update returns a builder for updating this MessageScore.
// Note that you need to call MessageScore.Unwrap() before calling this method if this MessageScore
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MessageScore) Update() *MessageScoreUpdateOne {
	return NewMessageScoreClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MessageScore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MessageScore) Unwrap() *MessageScore {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MessageScore is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MessageScore) String() string {
	var builder strings.Builder
	builder.WriteString("MessageScore(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", ms.Score))
	builder.WriteByte(')')
	return builder.String()
}

// MessageScores is a parsable slice of MessageScore.
type MessageScores []*MessageScore
