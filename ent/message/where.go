// Code generated by ent, DO NOT EDIT.

package message

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lukepeltier/discordle/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldText, v))
}

// DateSent applies equality check predicate on the "date_sent" field. It's identical to DateSentEQ.
func DateSent(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDateSent, v))
}

// DiscordID applies equality check predicate on the "discord_id" field. It's identical to DiscordIDEQ.
func DiscordID(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDiscordID, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldText, v))
}

// DateSentEQ applies the EQ predicate on the "date_sent" field.
func DateSentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDateSent, v))
}

// DateSentNEQ applies the NEQ predicate on the "date_sent" field.
func DateSentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDateSent, v))
}

// DateSentIn applies the In predicate on the "date_sent" field.
func DateSentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDateSent, vs...))
}

// DateSentNotIn applies the NotIn predicate on the "date_sent" field.
func DateSentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDateSent, vs...))
}

// DateSentGT applies the GT predicate on the "date_sent" field.
func DateSentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldDateSent, v))
}

// DateSentGTE applies the GTE predicate on the "date_sent" field.
func DateSentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldDateSent, v))
}

// DateSentLT applies the LT predicate on the "date_sent" field.
func DateSentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldDateSent, v))
}

// DateSentLTE applies the LTE predicate on the "date_sent" field.
func DateSentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldDateSent, v))
}

// DateSentContains applies the Contains predicate on the "date_sent" field.
func DateSentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldDateSent, v))
}

// DateSentHasPrefix applies the HasPrefix predicate on the "date_sent" field.
func DateSentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldDateSent, v))
}

// DateSentHasSuffix applies the HasSuffix predicate on the "date_sent" field.
func DateSentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldDateSent, v))
}

// DateSentEqualFold applies the EqualFold predicate on the "date_sent" field.
func DateSentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldDateSent, v))
}

// DateSentContainsFold applies the ContainsFold predicate on the "date_sent" field.
func DateSentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldDateSent, v))
}

// DiscordIDEQ applies the EQ predicate on the "discord_id" field.
func DiscordIDEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDiscordID, v))
}

// DiscordIDNEQ applies the NEQ predicate on the "discord_id" field.
func DiscordIDNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDiscordID, v))
}

// DiscordIDIn applies the In predicate on the "discord_id" field.
func DiscordIDIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDiscordID, vs...))
}

// DiscordIDNotIn applies the NotIn predicate on the "discord_id" field.
func DiscordIDNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDiscordID, vs...))
}

// DiscordIDGT applies the GT predicate on the "discord_id" field.
func DiscordIDGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldDiscordID, v))
}

// DiscordIDGTE applies the GTE predicate on the "discord_id" field.
func DiscordIDGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldDiscordID, v))
}

// DiscordIDLT applies the LT predicate on the "discord_id" field.
func DiscordIDLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldDiscordID, v))
}

// DiscordIDLTE applies the LTE predicate on the "discord_id" field.
func DiscordIDLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldDiscordID, v))
}

// DiscordIDContains applies the Contains predicate on the "discord_id" field.
func DiscordIDContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldDiscordID, v))
}

// DiscordIDHasPrefix applies the HasPrefix predicate on the "discord_id" field.
func DiscordIDHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldDiscordID, v))
}

// DiscordIDHasSuffix applies the HasSuffix predicate on the "discord_id" field.
func DiscordIDHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldDiscordID, v))
}

// DiscordIDEqualFold applies the EqualFold predicate on the "discord_id" field.
func DiscordIDEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldDiscordID, v))
}

// DiscordIDContainsFold applies the ContainsFold predicate on the "discord_id" field.
func DiscordIDContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldDiscordID, v))
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.DiscordMember) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
